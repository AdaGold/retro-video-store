{
	"info": {
		"_postman_id": "f70a458f-7878-4acb-b247-bf23c7719954",
		"name": "Video Store Api Wave 1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Wave 1",
			"item": [
				{
					"name": "List Customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set('newCustomerName', 'Lars Sankar');",
									"pm.collectionVariables.set('newCustomerPostalCode', 75007);",
									"pm.collectionVariables.set('newCustomerPhone', '111-111-1111');",
									"pm.collectionVariables.set('newCustomerVideosCheckedOut', 0);",
									"",
									"",
									"pm.test(\"Returns 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Won't give an error\", function() {",
									"    pm.response.to.not.be.error;",
									"});",
									"",
									"pm.test(\"response must be valid respond with json\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response must be an array\", function() {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.instanceOf(Array);",
									"    pm.collectionVariables.set(\"prePostCustomerCount\", responseJson.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/customers",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5000/customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"responds in json format\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response must be json with id key\", function() {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson['id']).to.be.a(\"number\");",
									"    pm.collectionVariables.set('newCustomerId', responseJson['id']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Lars Sankar\",\n    \"postal_code\": 75007,\n    \"phone\": \"111-111-1111\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/customers",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5000/customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Won't give an error\", function() {",
									"    pm.response.to.not.be.error;",
									"});",
									"",
									"pm.test(\"response must be valid respond with json\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response must be an array\", function() {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.instanceOf(Array);",
									"});",
									"",
									"pm.test(\"Response must be 1 element longer\", function() {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.length).to.equal(pm.collectionVariables.get(\"prePostCustomerCount\") + 1)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/customers",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5000/customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Won't give an error\", function() {",
									"    pm.response.to.not.be.error;",
									"});",
									"",
									"pm.test(\"response must be valid respond with json\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response must be an have the proper key-value pairs\", function() {",
									"    const res = pm.response.json();",
									"    const newCustomerName = pm.collectionVariables.get('newCustomerName');",
									"    const newCustomerPhone = pm.collectionVariables.get('newCustomerPhone');",
									"    const newCustomerPostalCode = pm.collectionVariables.get('newCustomerPostalCode');",
									"    const newCustomerVideosCheckedOut = pm.collectionVariables.get('newCustomerVideosCheckedOut');",
									"",
									"    pm.expect(res).to.include.keys(['id', 'name', 'phone', 'postal_code', 'registered_at', 'videos_checked_out_count']);",
									"    pm.expect(res['id']).to.equal(pm.collectionVariables.get('newCustomerId'));",
									"    pm.expect(res['name']).to.equal(newCustomerName);",
									"    pm.expect(res['postal_code']).to.equal(newCustomerPostalCode);",
									"    pm.expect(res['phone']).to.equal(newCustomerPhone);",
									"    pm.expect(res['videos_checked_out_count']).to.equal(newCustomerVideosCheckedOut);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/customers/{{newCustomerId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"customers",
								"{{newCustomerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5000/customers/{{newCustomerId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Won't give an error\", function() {",
									"    pm.response.to.not.be.error;",
									"});",
									"",
									"pm.test(\"response must be valid respond with json\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response must be an have the proper key-value pairs\", function() {",
									"    const res = pm.response.json();",
									"    const newCustomerName = pm.collectionVariables.get('newCustomerName');",
									"    const newCustomerPhone = pm.collectionVariables.get('newCustomerPhone');",
									"    const newCustomerPostalCode = pm.collectionVariables.get('newCustomerPostalCode');",
									"    const newCustomerVideosCheckedOut = pm.collectionVariables.get('newCustomerVideosCheckedOut');",
									"",
									"    pm.expect(res).to.include.keys(['id', 'name', 'phone', 'postal_code', 'registered_at', 'videos_checked_out_count']);",
									"    pm.expect(res['id']).to.equal(pm.collectionVariables.get('newCustomerId'));",
									"    pm.expect(res['name']).to.equal('Carmen Santiago');",
									"    if (typeof(res['postal_code']) == String) {",
									"        pm.expect(res['postal_code']).to.equal('98121');",
									"    } else {",
									"        pm.expect(typeof(res['postal_code'])).to.equal('number');",
									"        pm.expect(res['postal_code']).to.equal(98121);",
									"    }",
									"    pm.expect(res['phone']).to.equal('222-222-2222');",
									"    pm.expect(res['videos_checked_out_count']).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Carmen Santiago\",\n    \"postal_code\": 98121,\n    \"phone\": \"222-222-2222\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/customers/{{newCustomerId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"customers",
								"{{newCustomerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5000/customers/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"responds in json format\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/customers/{{newCustomerId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"customers",
								"{{newCustomerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5000/customers/{{newCustomerId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Won't give an error\", function() {",
									"    pm.response.to.not.be.error;",
									"});",
									"",
									"pm.test(\"response must be valid respond with json\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response must an id-key-value pair\", function() {",
									"    const res = pm.response.json();",
									"    ",
									"    pm.expect(res).to.have.property('id');",
									"    pm.expect(res['id']).to.equal(pm.collectionVariables.get('newCustomerId'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/customers/{{newCustomerId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"customers",
								"{{newCustomerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET \"customers/<customer_id>\" request for previously deleted customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/customers/{{newCustomerId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"customers",
								"{{newCustomerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE customers/{{newCustomerId}} with a deleted customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/customers/{{newCustomerId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"customers",
								"{{newCustomerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST \"/customers\" with invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"responds in json format\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/customers",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Request to \"customers/{{newCustomerId}}\" for previously deleted customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/customers/{{newCustomerId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"customers",
								"{{newCustomerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5000/videos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set('newMovieTitle', 'The Princess Bride');",
									"pm.collectionVariables.set('newMovieTotalInventory', 42);",
									"pm.collectionVariables.set('newMovieAvailableInventory', 42);",
									"pm.collectionVariables.set('newMovieReleaseDate', '1987-09-25');",
									"",
									"",
									"",
									"pm.test(\"Returns 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Won't give an error\", function() {",
									"    pm.response.to.not.be.error;",
									"});",
									"",
									"pm.test(\"response must be valid respond with json\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response must be an array\", function() {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.instanceOf(Array);",
									"    pm.collectionVariables.set(\"prePostVideoCount\", responseJson.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/videos",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"videos"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5000/videos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"responds in json format\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response must be json with id key\", function() {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson['id']).to.be.a(\"number\");",
									"    pm.collectionVariables.set('newVideoId', responseJson['id']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{newMovieTitle}}\",\n    \"release_date\": \"{{newMovieReleaseDate}}\",\n    \"total_inventory\": \"{{newMovieTotalInventory}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/videos",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"videos"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5000/videos after adding a video",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Won't give an error\", function() {",
									"    pm.response.to.not.be.error;",
									"});",
									"",
									"pm.test(\"response must be valid respond with json\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response must be an array\", function() {",
									"    const responseJson = pm.response.json();",
									"    const prePostVideoCount = pm.collectionVariables.get(\"prePostVideoCount\")",
									"    pm.expect(responseJson).to.be.instanceOf(Array);",
									"    pm.expect(responseJson.length).to.equal(prePostVideoCount + 1)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/videos",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"videos"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET New Video",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Won't give an error\", function() {",
									"    pm.response.to.not.be.error;",
									"});",
									"",
									"pm.test(\"response must be valid respond with json\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response must be an have the proper key-value pairs\", function() {",
									"    const res = pm.response.json();",
									"    const newVideoTitle = pm.collectionVariables.get('newMovieTitle');",
									"    const newVideoTotalInventory = pm.collectionVariables.get('newMovieTotalInventory');",
									"",
									"    pm.expect(res).to.include.keys(['id', 'title', 'release_date', 'total_inventory'])",
									"            ",
									"",
									"    pm.expect(res['id']).to.equal(pm.collectionVariables.get('newVideoId'));",
									"    pm.expect(res['title']).to.equal(newVideoTitle);",
									"    pm.expect(res['total_inventory']).to.equal(newVideoTotalInventory);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/videos/{{newVideoId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"videos",
								"{{newVideoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5000/videos/{{newVideoId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"updatedTitle\", \"Citizen Kane\");",
									"pm.collectionVariables.set(\"updatedReleaseDate\", \"1941-05-01\");",
									"pm.collectionVariables.set(\"updatedTotalInventory\", 22)",
									"",
									"pm.test(\"Returns 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Won't give an error\", function() {",
									"    pm.response.to.not.be.error;",
									"});",
									"",
									"pm.test(\"response must be valid respond with json\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response must be an have the proper key-value pairs\", function() {",
									"    const res = pm.response.json();",
									"    const updatedTitle = pm.collectionVariables.get('updatedTitle');",
									"    const updatedReleaseDate = pm.collectionVariables.get('updatedReleaseDate');",
									"    const updatedTotalInventory = pm.collectionVariables.get('updatedTotalInventory');",
									"",
									"",
									"    const newVideoTitle = pm.collectionVariables.get('newMovieTitle');",
									"    const newVideoTotalInventory = pm.collectionVariables.get('newMovieTotalInventory');",
									"",
									"    pm.expect(res).to.include.keys(['id', 'title', 'release_date', 'total_inventory'])",
									"            ",
									"",
									"    pm.expect(res['id']).to.equal(pm.collectionVariables.get('newVideoId'));",
									"    pm.expect(res['title']).to.equal(updatedTitle);",
									"    pm.expect(res['total_inventory']).to.equal(updatedTotalInventory);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Citizen Kane\",\n    \"release_date\": \"1941-05-01\",\n    \"total_inventory\": 22\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/videos/{{newVideoId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"videos",
								"{{newVideoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE New Video",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Won't give an error\", function() {",
									"    pm.response.to.not.be.error;",
									"});",
									"",
									"pm.test(\"response must be valid respond with json\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response must include the id of the deleted video\", function() {",
									"    const res = pm.response.json();",
									"    ",
									"    pm.expect(res).to.have.property('id');",
									"            ",
									"",
									"    pm.expect(res['id']).to.equal(pm.collectionVariables.get('newVideoId'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/videos/{{newVideoId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"videos",
								"{{newVideoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET \"videos/<video_id>\" request for previously deleted video",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/videos/{{newVideoId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"videos",
								"{{newVideoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE videos/{{newVideoId}} with a deleted video",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/videos/{{newVideoId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"videos",
								"{{newVideoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST \"/videos\" with invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"responds in json format\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/videos",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"videos"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Request to \"videos/{{newVideoId}}\" for previously deleted video",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/videos/{{newVideoId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"videos",
								"{{newVideoId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "newCustomerId",
			"value": ""
		},
		{
			"key": "newCustomerName",
			"value": ""
		},
		{
			"key": "prePostCustomerCount",
			"value": ""
		},
		{
			"key": "newCustomerPostalCode",
			"value": ""
		},
		{
			"key": "newCustomerPhone",
			"value": ""
		},
		{
			"key": "newCustomerVideosCheckedOut",
			"value": ""
		},
		{
			"key": "title",
			"value": ""
		},
		{
			"key": "total_inventory",
			"value": ""
		},
		{
			"key": "available_inventory",
			"value": ""
		},
		{
			"key": "release_date",
			"value": ""
		},
		{
			"key": "newMovieTitle",
			"value": ""
		},
		{
			"key": "newMovieTotalInventory",
			"value": ""
		},
		{
			"key": "newMovieAvailableInventory",
			"value": ""
		},
		{
			"key": "newMovieReleaseDate",
			"value": ""
		},
		{
			"key": "newVideoId",
			"value": ""
		},
		{
			"key": "prePostVideoCount",
			"value": ""
		},
		{
			"key": "updatedTitle",
			"value": ""
		},
		{
			"key": "updatedReleaseDate",
			"value": ""
		},
		{
			"key": "updatedTotalInventory",
			"value": ""
		}
	]
}
