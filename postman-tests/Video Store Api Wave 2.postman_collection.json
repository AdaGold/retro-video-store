{
	"info": {
		"_postman_id": "84c63455-57ce-46de-9c3b-bf2f6bc39a60",
		"name": "Video Store Api Wave 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "http://localhost:5000/customers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Store Id for future tests\", function() {",
							"    const responseJson = pm.response.json();",
							"    pm.collectionVariables.set('newCustomerId', responseJson['id']);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Lars Sankar\",\n    \"postal_code\": 75007,\n    \"phone\": \"111-111-1111\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/customers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"customers"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/videos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Store data for future tests\", function() {",
							"    const responseJson = pm.response.json();",
							"    pm.collectionVariables.set('newVideoId', responseJson['id']);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Blacksmith Of The Banished\",\n    \"release_date\": \"1979-01-18\",\n    \"total_inventory\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/videos",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"videos"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET New Customer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Save inventory for future tests\", function() {",
							"    const res = pm.response.json();",
							"",
							"    pm.collectionVariables.set(\"preCheckoutVideosCheckedOut\", res['videos_checked_out_count']);",
							"    pm.collectionVariables.set('newCustomerName', res['name']);",
							"    pm.collectionVariables.set('newCustomerPostal', res[\"postal_code\"]);",
							"    pm.collectionVariables.set('newCustomerPhone', res[\"phone\"]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/customers/{{newCustomerId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"customers",
						"{{newCustomerId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET New Video",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Save inventory for future tests\", function() {",
							"    const res = pm.response.json();",
							"",
							"    pm.collectionVariables.set(\"preCheckoutInventory\", res['total_inventory']);",
							"    pm.collectionVariables.set('newVideoReleaseDate', res['release_date'])",
							"    pm.collectionVariables.set('newVideoTitle', res['title'])",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/videos/{{newVideoId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"videos",
						"{{newVideoId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "check-out",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Returns 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"responds in json format\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response must be json with appropriate keys and values\", function() {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.all.keys(['customer_id', 'video_id', 'due_date', 'videos_checked_out_count', 'available_inventory']);",
							"    pm.expect(responseJson['customer_id']).to.equal(pm.collectionVariables.get('newCustomerId'));",
							"    pm.expect(responseJson['video_id']).to.equal(pm.collectionVariables.get('newVideoId'));",
							"    pm.expect(responseJson['due_date']).not.equal(null);",
							"    pm.expect(responseJson['due_date']).not.equal(undefined);",
							"    pm.expect(responseJson['available_inventory']).to.equal(pm.collectionVariables.get('preCheckoutInventory') - 1)",
							"    pm.expect(responseJson['videos_checked_out_count']).to.equal(pm.collectionVariables.get('preCheckoutVideosCheckedOut') + 1)",
							"    pm.collectionVariables.set('rentalDueDate', responseJson['due_date']);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"customer_id\": {{newCustomerId}},\n    \"video_id\": {{newVideoId}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/rentals/check-out",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"rentals",
						"check-out"
					]
				}
			},
			"response": []
		},
		{
			"name": "check-out (empty inventory)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Returns 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"responds in json format\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"customer_id\": {{newCustomerId}},\n    \"video_id\": {{newVideoId}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/rentals/check-out",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"rentals",
						"check-out"
					]
				}
			},
			"response": []
		},
		{
			"name": "Rentals by customer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Returns 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Won't give an error\", function() {",
							"    pm.response.to.not.be.error;",
							"});",
							"",
							"pm.test(\"response must be valid respond with json\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response must be an have the proper key-value pairs\", function() {",
							"    const res = pm.response.json();",
							"    const newVideoTitle = pm.collectionVariables.get('newMovieTitle');",
							"",
							"    pm.expect(Object.keys(res[0])).to.contain.members(['title', 'release_date', 'due_date'])",
							"            ",
							"",
							"    pm.expect(res[0]['title']).to.equal(pm.collectionVariables.get('newVideoTitle'));",
							"    pm.expect(res[0]['release_date']).to.equal(pm.collectionVariables.get('newVideoReleaseDate'));",
							"    pm.expect(res[0]['due_date']).to.equal(pm.collectionVariables.get('rentalDueDate'))",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/customers/{{newCustomerId}}/rentals",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"customers",
						"{{newCustomerId}}",
						"rentals"
					]
				}
			},
			"response": []
		},
		{
			"name": "Rentals by video",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Returns 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Won't give an error\", function() {",
							"    pm.response.to.not.be.error;",
							"});",
							"",
							"pm.test(\"response must be valid respond with json\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response must be an have the proper key-value pairs\", function() {",
							"    const res = pm.response.json();",
							"    const newVideoTitle = pm.collectionVariables.get('newMovieTitle');",
							"",
							"    pm.expect(Object.keys(res[0])).to.contain.members(['name', 'phone', 'postal_code', 'due_date'])",
							"            ",
							"",
							"    pm.expect(res[0]['name']).to.equal(pm.collectionVariables.get('newCustomerName'));",
							"    pm.expect(res[0]['phone']).to.equal(pm.collectionVariables.get('newCustomerPhone'));",
							"    pm.expect(res[0]['postal_code']).to.equal(pm.collectionVariables.get('newCustomerPostal'));",
							"    pm.expect(res[0]['due_date']).to.equal(pm.collectionVariables.get('rentalDueDate'));",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/videos/{{newVideoId}}/rentals",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"videos",
						"{{newVideoId}}",
						"rentals"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check-in Video",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Returns 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"responds in json format\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response must be json with appropriate keys and values\", function() {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.all.keys(['customer_id', 'video_id', 'videos_checked_out_count', 'available_inventory']);",
							"    pm.expect(responseJson['customer_id']).to.equal(pm.collectionVariables.get('newCustomerId'));",
							"    pm.expect(responseJson['video_id']).to.equal(pm.collectionVariables.get('newVideoId'));",
							"    pm.expect(responseJson['available_inventory']).to.equal(pm.collectionVariables.get('preCheckoutInventory'))",
							"    pm.expect(responseJson['videos_checked_out_count']).to.equal(pm.collectionVariables.get('preCheckoutVideosCheckedOut'))",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"customer_id\": {{newCustomerId}},\n    \"video_id\": {{newVideoId}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/rentals/check-in",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"rentals",
						"check-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check-in Same Video (Error)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Returns 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"responds in json format\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"customer_id\": {{newCustomerId}},\n    \"video_id\": {{newVideoId}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/rentals/check-in",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"rentals",
						"check-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "check-out of invalid customer_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Returns 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"responds in json format\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"customer_id\": \"not an id\",\n    \"video_id\": {{newVideoId}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/rentals/check-out",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"rentals",
						"check-out"
					]
				}
			},
			"response": []
		},
		{
			"name": "check-out of invalid video_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Returns 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"responds in json format\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"customer_id\": {{newCustomerId}},\n    \"video_id\": \"not a valid id\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/rentals/check-out",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"rentals",
						"check-out"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "newCustomerId",
			"value": ""
		},
		{
			"key": "newVideoId",
			"value": ""
		},
		{
			"key": "preCheckoutVideosCheckedOut",
			"value": ""
		},
		{
			"key": "preCheckoutInventory",
			"value": ""
		},
		{
			"key": "newVideoReleaseDate",
			"value": ""
		},
		{
			"key": "newVideoTitle",
			"value": ""
		},
		{
			"key": "rentalDueDate",
			"value": ""
		},
		{
			"key": "newCustomerName",
			"value": ""
		},
		{
			"key": "newCustomerPhone",
			"value": ""
		},
		{
			"key": "newCustomerPostal",
			"value": ""
		}
	]
}